{"h1":"Java","h2":"Objekte","collections":[],"date":"2022-12-04T11:11:53.485Z","data":[{"title":"Einstieg","type":"text","paragraphs":["Objekte spielen beim Programmieren mit Java eine große Rolle, daher ist es sinnvoll sich mit ihnen vertraut zu machen. Wir beginnen mit einem beliebigen Objekt und beginnen z.B. mit unserem Nachbarn Klaus. Er hat Eigenschaften die mehr oder weniger fest sind, wie z.B. seine Größe, seine Augenfarbe, seinen Fingerabdruck, seine Haarfarbe etc. Dazu kommen Bildung, Erfahrungen und vieles mehr, was man in Daten festhalten könnte. Die festgehaltenen Daten sind natürlich begrenzt und so kann man bereits ein Objekt machen, das nur den Namen speichert. Unser Plan für das Objekt ist also das folgende: "]},{"type":"diagram","title":"Klassen-Diagramm","diagramData":[{"color":"purple","title":"Nachbar","attributes":[{"attribute":"name","type":"Klaus"}]}]},{"title":"Plan eines Objekts","type":"text","paragraphs":["Obiger Plan ist noch kein echter \"Plan\", also keine Schablone für mehrere Objekte, da es sich nur um Klaus handelt. Für unsere Klasse, mit der wir Objekte erstellen wollen, müssen wir uns nun entscheiden, ob wir als Oberbegriff \"Nachbar\" wählen oder \"Mensch\" oder \"Erdbewohner\". Je nach Anwendungsfall und Einbindung ins Programm wollen wir da vielleicht etwas anderes verwenden wollen. Im Normalfall können wir uns an unsere Alltagserfahrungen anlehnen, je mehr uns das gelingt, desto verständlicher wird der Code. In unserem Fall wählen wir als Oberbegriff \"Mensch\" und spezifizieren unsere Beziehung zu ihm in einem weiteren Feld namens \"beziehung\". "]},{"title":"Attribute und Variablen","type":"text","paragraphs":["Für die Attribute bzw. für alle Variablen denken wir uns immer möglichst gut verständliche Begriffe aus. Die meisten Programmierer wählen hierfür englische Begriffe, damit der Code auch über die Landesgrenzen hinaus verständlich ist und weiter verwendet werden kann. Der Variablenname ist ein Schlüssel für verständlichen Code.\nDie Variablen können nur in ganz speziellen Formaten gespeichert werden. Zumeist ist das der \"String\", also eine Reihe von aneinandergeketteten Buchstaben und Zeichen.\nDie verschiedenen Möglichkeiten werden an späterer Stelle betrachtet. Wenn wir also den Menschen anschauen, speichern wir den Namen als Zeichenkette, der Plan bzw. die Schablone dazu sieht folgendermaßen aus: "]},{"type":"diagram","title":"Klassen-Diagramm","diagramData":[{"color":"purple","title":"Mensch","attributes":[{"attribute":"name","type":"String"}]}]},{"title":"","type":"text","paragraphs":["Das Objekt dazu ist dann folgendes: "]},{"type":"diagram","title":"Klassen-Diagramm","diagramData":[{"color":"purple","title":"klaus","attributes":[{"attribute":"name","type":"Klaus"}]}]},{"title":"","type":"text","paragraphs":["Eventuell sieht das kompliziert aus, wenn man aber aufs Detail achtet ist alles einfacher als man denkt. Der Plan für etwas ist die Klasse selbst, das Objekt selbst erstellt man später anhand des Planes. Der Java Code dazu sieht so aus: "]},{"type":"code","title":"Example","data":"class Mensch{\n   String name;\n }","language":"java","hasLineNumbers":true},{"title":"","type":"text","paragraphs":["Um ein Objekt anhand der \"Schablone\" bzw. Klasse \"Mensch\" zu erstellen, muss man folgende Zeile in den ausgeführten Code schreiben:"]},{"type":"code","title":"","data":"Mensch klaus = new Mensch(\"Klaus\");","language":"java","hasLineNumbers":true},{"title":"","type":"text","paragraphs":["Damit dieses Objekt erstellt werden kann aus oben liegenden Plan, muss ein \"Konstruktor\" in der Klasse Mensch ergänzt werden. Dieser sagt dem Programm, was er beim Erstellen eines Objektes tun soll, also wenn die Klasse mit dem Wort \"new\" davor initialisiert wird. Der Konstruktor sähe hier so aus:"]},{"type":"code","title":"","data":"class Mensch{\n   String name;\n\n   public Mensch(String name){\n      this.name=name;\n   }\n}","language":"java","hasLineNumbers":true},{"title":"","type":"text","paragraphs":["Der Konstruktor ist \"public\", da man ihn von einer anderen Klasse aus aufrufen können soll, in diesem fall quasi weltweit jeder, der Zugriff auf dein Programm hat. Er hat den Namen Mensch, weil die Klasse selbst so heißt. So erkennt Java den Konstruktor. Wenn wir nur einen Konstruktor haben, müssen wir beim Aufruf, also beim erstellen eines Objektes nach diesem Schema, immer genau so viele Dinge eingeben, wie sie in den runden Klammern vermerkt sind. In diesem Fall müssen wir einen String eingeben, den der Konstruktor im Objekt dann unter dem Attribut \"name\" speichert."]},{"title":"Verwenden des Objektes","type":"text","paragraphs":["Wenn wir nun z.B. mehrere Personen gespeichert bzw. initialisiert haben, dann können wir ihre Namen im späteren Programmverlauf. Natürlich nicht davor. Wenn wir die Namen z.B. in der Konsole ausgeben wollen, können wir folgende Befehle verwenden:"]},{"type":"code","title":"","data":"Mensch klaus = new Mensch(\"Klaus\");\nMensch bettina = new Mensch(\"Bettina\");\n//Ausdrucken:\nSystem.out.println(\"Das sind die initialisierten Menschen:\");\nSystem.out.println(klaus.name);\nSystem.out-println(bettina.name);","language":"java","hasLineNumbers":true}]}
